{"version":3,"sources":["scripts/api.js","store/todos.js","store/userId.js","store/titleFilter.js","store/todosFiltering.js","store/randomize.js","store/user.js","store/index.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.jsx"],"names":["baseUrl","request","endPoint","options","fetch","then","response","json","result","data","ADD","UPDATE","actions","dispatch","todos","id","method","deleteTodo","value","type","todosReducer","action","Array","isArray","filter","SET","CLEAR","userIdReducer","userId","titleFilterReducer","titleFilter","todosFilteringReducer","todosFiltering","SWITCH","randomizeReducer","randomOrder","CHOOSE","user","userReducer","getTodos","state","getUserId","getTitleFilter","getTodosFiltering","getRandomOrder","getUser","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","selectedUser","selectUser","useSelector","random","useDispatch","filterTodos","useCallback","todo","completed","shuffle","index","todosLength","length","Math","floor","push","splice","checkTitle","title","includes","preparedTodos","className","htmlFor","placeholder","onChange","target","titleFilterActions","name","todosFilteringActions","classNames","onClick","randomizeActions","map","key","readOnly","checked","todosActions","defaultProps","CurrentUser","clearUser","useEffect","userActions","email","phone","App","selectedUserId","userIdActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4294dbf.chunk.js","sourcesContent":["const baseUrl = 'https://mate-api.herokuapp.com';\n\nconst request = (endPoint, options = {}) => (\n  fetch(`${baseUrl}${endPoint}`, options)\n    .then(response => response.json())\n    .then(result => result.data)\n);\n\nexport const getTodos = () => request('/todos');\nexport const deleteTodo = (id) => request(`/todos/${id}`, { method: 'DELETE' });\nexport const getUser = userId => request(`/users/${userId}`);\n","import { getTodos, deleteTodo } from '../scripts/api';\n\nexport const LOAD = 'todos/load';\nexport const DELETE = 'todos/delete';\nexport const ADD = 'todos/add';\nexport const UPDATE = 'todos/update';\n\nexport const actions = {\n  [LOAD]: () => (dispatch) => {\n    getTodos()\n      .then((todos) => {\n        dispatch(actions[ADD](todos));\n      });\n  },\n\n  [DELETE]: (id) => (dispatch) => {\n    deleteTodo(id)\n      .then(() => {\n        dispatch(actions[UPDATE](id));\n      });\n  },\n\n  [ADD]: (value) => ({ type: ADD, value }),\n  [UPDATE]: (id) => ({ type: UPDATE, id }),\n};\n\nconst todosReducer = (todos = [], action) => {\n  switch (action.type) {\n    case ADD:\n      const { value } = action;\n\n      if (Array.isArray(value)) {\n        return [...todos, ...value];\n      }\n\n      return [...todos, value];\n\n    case UPDATE:\n      return todos.filter(({ id }) => id !== action.id);\n  \n    default:\n      return todos;\n  }\n}\n\nexport default todosReducer;\n","export const SET = 'userId/set';\nexport const CLEAR = 'userId/clear';\n\nexport const actions = {\n  [SET]: (id) => ({ type: SET, id }),\n  [CLEAR]: () => ({ type: CLEAR }),\n}\n\nconst userIdReducer = (userId = 0, action) => {\n  switch (action.type) {\n    case SET:\n      return action.id;\n\n    case CLEAR:\n      return 0;\n  \n    default:\n      return userId;\n  }\n}\n\nexport default userIdReducer;\n","export const SET = 'titleFilter/set';\nexport const CLEAR = 'titleFilter/clear';\n\nexport const actions = {\n  [SET]: (value) => ({ type: SET, value }),\n  [CLEAR]: () => ({ type: CLEAR }),\n}\n\nconst titleFilterReducer = (titleFilter = '', action) => {\n  switch (action.type) {\n    case SET:\n      return action.value;\n\n    case CLEAR:\n      return '';\n  \n    default:\n      return titleFilter;\n  }\n}\n\nexport default titleFilterReducer;\n","export const SET = 'todosFiltering/set';\n\nexport const actions = {\n  [SET]: (filter) => ({ type: SET, filter }),\n}\n\nconst todosFilteringReducer = (todosFiltering = '', action) => {\n  switch (action.type) {\n    case SET:\n      return action.filter;\n  \n    default:\n      return todosFiltering;\n  }\n}\n\nexport default todosFilteringReducer;\n","export const SWITCH = 'randomize/switch';\n\nexport const actions = {\n  [SWITCH]: () => ({ type: SWITCH }),\n}\n\nconst randomizeReducer = (randomOrder = false, action) => {\n  switch (action.type) {\n    case SWITCH:\n      return !randomOrder;\n  \n    default:\n      return randomOrder;\n  }\n}\n\nexport default randomizeReducer;\n","import { getUser } from '../scripts/api';\n\nexport const CHOOSE = 'user/choose';\nexport const LOAD = 'user/load';\n\nexport const actions = {\n  [LOAD]: (id) => (dispatch) => {\n    getUser(id)\n      .then((user) => {\n        dispatch(actions[CHOOSE](user));\n      });\n  },\n\n  [CHOOSE]: (user) => ({ type: CHOOSE, user }),\n}\n\nconst userReducer = (user = null, action) => {\n  switch (action.type) {\n    case CHOOSE:\n      return action.user;\n\n    default:\n      return user;\n  }\n}\n\nexport default userReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport todosReducer from './todos'\nimport userIdReducer from './userId'\nimport titleFilterReducer from './titleFilter';\nimport todosFilteringReducer from './todosFiltering';\nimport randomizeReducer from './randomize';\nimport userReducer from './user';\n\nexport const getTodos = (state) => state.todos;\nexport const getUserId = (state) => state.userId;\nexport const getTitleFilter = (state) => state.titleFilter;\nexport const getTodosFiltering = (state) => state.todosFiltering;\nexport const getRandomOrder = (state) => state.randomOrder;\nexport const getUser = (state) => state.user;\n\nconst initialState = {\n  todos: [],\n  userId: 0,\n  titleFilter: '',\n  todosFiltering: 'all',\n  randomOrder: false,\n  user: null,\n};\n\nconst reducer = combineReducers({\n  todos: todosReducer,\n  userId: userIdReducer,\n  titleFilter: titleFilterReducer,\n  todosFiltering: todosFilteringReducer,\n  randomOrder: randomizeReducer,\n  user: userReducer,\n});\n\nconst store = createStore(reducer, initialState, composeWithDevTools(\n  applyMiddleware(thunk)\n));\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { actions as todosActions, DELETE } from '../../store/todos';\nimport { getTitleFilter, getTodosFiltering, getRandomOrder } from '../../store';\nimport { actions as titleFilterActions, SET as setTitleFilter } from '../../store/titleFilter';\nimport {\n  actions as todosFilteringActions,\n  SET as setTodosFiltering,\n} from '../../store/todosFiltering';\nimport { actions as randomizeActions, SWITCH } from '../../store/randomize';\n\nimport './TodoList.scss';\n\nexport function TodoList({ todos, selectedUser, selectUser }) {\n  const titleFilter = useSelector(getTitleFilter);\n  const todosFiltering = useSelector(getTodosFiltering);\n  const random = useSelector(getRandomOrder);\n  const dispatch = useDispatch();\n\n  const filterTodos = useCallback((todos) => {\n    switch (todosFiltering) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }, []);\n\n  const shuffle = useCallback((todos) => {\n    const result = [];\n    let todosLength = todos.length;\n    let index;\n\n    while (todosLength) {\n      // eslint-disable-next-line no-plusplus\n      index = Math.floor(Math.random() * todosLength--);\n      result.push(todos.splice(index, 1)[0]);\n    }\n\n    return result;\n  }, [])\n\n  const checkTitle = useCallback((title, titleFilter) => (\n    title && title.includes(titleFilter)\n  ), []);\n\n  let preparedTodos = filterTodos([...todos]);\n\n  if (random) {\n    preparedTodos = shuffle(preparedTodos);\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <label htmlFor=\"filterByTitle\">\n        {`Filter todos by title `}\n        <input\n          className=\"sorting-input\"\n          type=\"text\"\n          placeholder=\"Enter a query\"\n          id=\"filterByTitle\"\n          value={titleFilter}\n          onChange={({target}) => {\n            dispatch(titleFilterActions[setTitleFilter](target.value));\n          }}\n        />\n      </label>\n\n      <select\n        className=\"sorting-input\"\n        name=\"sortingTodos\"\n        id=\"sortingTodos\"\n        value={todosFiltering}\n        onChange={({target}) => {\n          dispatch(todosFilteringActions[setTodosFiltering](target.value));\n        }}\n      >\n        <option value=\"all\">Show all todos</option>\n        <option value=\"active\">Show uncompleted todos</option>\n        <option value=\"completed\">Show completed todos</option>\n      </select>\n\n      <button\n        type=\"button\"\n        className={classNames(\n          'sorting-input',\n          {\n            'randomize-active': random,\n            'randomize-inactive': !random,\n          },\n        )}\n        onClick={() => {\n          dispatch(randomizeActions[SWITCH]())\n        }}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {preparedTodos.map(todo => (\n            checkTitle(todo?.title, titleFilter) ? (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                \n                <div className=\"TodoList__button-wrapper\">\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      'button',\n                      { 'button--selected': selectedUser === todo.userId },\n                    )}\n                    type=\"button\"\n                    onClick={() => {\n                      selectUser(todo.userId);\n                    }}\n                  >\n                    {todo.userId ? (\n                      <>\n                        User&nbsp;#\n                        {todo.userId}\n                      </>\n                    ) : (\n                      <>\n                        not assigned\n                      </>\n                    )}\n                  </button>\n\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(todosActions[DELETE](todo.id))\n                    }}\n                  >\n                    delete todo\n                  </button>\n                </div>\n              </li>\n            ) : (\n              null\n            )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n      userId: PropTypes.number,\n    }),\n  ),\n  selectedUser: PropTypes.number,\n  selectUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  selectedUser: 0,\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getUser } from '../../store';\nimport { actions as userActions, LOAD } from '../../store/user';\n\nimport './CurrentUser.scss';\n\nexport function CurrentUser ({ userId, clearUser }) {\n  // const [user, setUser] = useState(null);\n  const user = useSelector(getUser)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(userActions[LOAD](userId))\n  }, [userId, dispatch])\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n\n          <button\n            className=\"CurrentUser__clear button\"\n            type=\"button\"\n            onClick={() => {\n              clearUser();\n            }}\n          >\n            Clear selected user\n          </button>\n        </>\n      ) : (\n        <>\n          Loading...\n        </>\n      )}\n    </div>\n  );\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getTodos, getUserId } from './store';\nimport { actions as todosActions, LOAD } from './store/todos';\nimport { actions as userIdActions, SET, CLEAR } from './store/userId';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nfunction App() {\n  const todos = useSelector(getTodos);\n  const selectedUserId = useSelector(getUserId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(todosActions[LOAD]())\n  }, [])\n\n  const selectUser = useCallback((userId) => {\n    dispatch(userIdActions[SET](userId))\n  }, []);\n\n  const clearUser = useCallback(() => {\n    dispatch(userIdActions[CLEAR]())\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUser={selectedUserId}\n          selectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} clearUser={clearUser} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n      <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}